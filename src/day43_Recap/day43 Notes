10/25/2019
Java Review:
		1. static keyword
		2. initializer blocks (static vs ins vs cons)
		3. OOP Encapsulation
	

next topics: OOP Inheritance, Method Overriding, Final

package: day43_JavaRecap


local Variables: variables that are declared within the method or blocks
			only accessible within the method or block

instance variable: belong to the object. each object has its own copy of instance variables

static keyword: any feature that has static keyword belongs to the class, also can be called through the class.  ( class members )

static members:
			1. static variables
			2. static methods
			3. static initializer block
			4. static inner class (nested class)


static variable: variable that's shared by class and objects, there is only one copy

static methods: methods that we can call it through the class name ( beong to class)
			Ex: 	Webdriver driver = WebDriverFactory.getDriver();			

				static methods only accepts class members (static)

				none statics can ONLY be called through the object


static inititializer block: used for initializing static variable
					
				declared in the class outside the method. WITH STATIC KEYWORD
	
						static{
							statements;
						}

				it's executed as soon as the class is loaded, ONLY 1 time


instance initializer block: used for initializing the instance variables

				declared in the class outside the method

				{
					statements;
				}

			it's execution depends on the creation of the object

			instance block runs before the constructor



import:
		import PackageName.className;  ==> to import a single class




this(): used for calling the constructors
			we can only used it in the constructor


this. : used for calling the instance variables
		this. we can used in any object isnstances


Encapsulation: hiding the instance variable
		1. hide the data by giving private access modifier
		2. grants other classes get access to the private instance variable through public getter/setters

	private: only visible (accessible) within the class


	getter (Read): instance method, returns the private instance variable

			return-type of the getter MUST match with the data-type of the instance variable

			access modifier needs to be public, because we want to call the method outside the classes


	setter (modify): instance method, return-type is void, passess a parameter

				the parameter' data-type MUST match with instance variable	


Next week:
	Monday :
		static import
		Multi-class
		Access modifiers: public, private, default

	Tuesday:
		OOP Inheritance

