10/24/2019
Topic: OOP Encapsulation
            1. private access modifier
            2. getter & setter
           
package: day42_OOP_Encapsulation

OOP: Object Oriented Programming
-----------------------------------------------------------------------------------------------------------------

Class:
        data/attribute ==> instance variables
 
        Actions     ==>  instance method.


Instance variable: belongs to the object. Each object has its own copy of instance variable.

Encapsulation: to hide the instance variables (hiding the data)

            1. hiding the data by giving private access modifier.
            2. grants other classes get access to the private data using public getters & setters.


    getter (Read only): an instance method that returns the private data, does not pass any parameter.

              Access modifier should not be private, because we want to call the method 
              outside the class.
              The return of the method MUST match with the data-type of the instance variable.          


    Setter(Modify): an instance method, passes a parameter. return-type is void.

             Access modifier should not be private, because we want to call the method
             outside the class.
             The parameter's data-type MUST match with instance variable'
             The Argument MUST be assigned to the instance variable.
             If the parameter has the same name with instance variable, 
             we need to use this. keyword to call the instance variable of the class.



private: If the feature is private, the feature is only visible within the class.
         Codes outside the class cannot access to the data, not accessible
         to any other class.


this. : used for calling the instance variables in an object instance.
        We only use it when the local variable has the same name with the instance variable.
        
        
