10/31/2019

Topic: super Keyword: super. & super()
       Constructor in Inheritance
       super vs this

package: day46_SuperKeyword

----------------------------------------------------------------------------------------------------

Inheritance:  super and sub classes
    
        class   A    extends    B
                sub            super
        subclass:  sub class inherits features from the super class, sub class gets rich.
                   public and protected access modifiers can always be inheritable in the subclass
                   default access modifier can only be inherited to the classes that are in the same 
                   package.
                   private can NEVER be inherited.

        superclass: super class does not inherit anything from the sub class.


this. : used for calling instances variables, can only be used in object instances.

super. : used for calling instances (instance variable and methods) from the super class. 
         super keyword can only be used in the subclass.

this. vs super. :

        this. : used for calling the instances from the class itself to use them, 
                we don't need inheritance. 

        super. : used for calling the instances from the super class.
                 To use super, we MUST have super class and sub class relationship.

Constructor: at least one of the constructors from the super class has to be called 
             in the sub class.        
             Super class' default constructor is called in the sub class by default if declared.

super(): used for calling the constructors from the super class.
         MUSt be used in the sub class.

this(): used for calling the constructors from the same class itself.
--------------------------------------------------------------------------------------------------

All the rules of of the constructor:

  Constructor: Special method. Belongs to the object. Used when we create the objects of the class.

         1. Every class MUST have constructor. 
            (if there isn't any, compiler will supply no-arg constructor by default)
         
         2. Constructor method cannot have return-types or specifiers.
                    return-types: primitives, wrapper class, objects,...
                    specifiers: final, static, abstract.
                    
         3. Constructor' name MUST be same with the ClassName.
         
         4. Constructor' execution depends on the creation of Object.
         
         5. Constructor can only be called in other constructor. 
                        ( methods or blocks cannot call constructor)
         
         6. Constructor cannot be called by constructor-name, MUST be called with this() or 
            super() keywords.
                        this(): calls the class' constructor.
                        super(): calls the super class' constructor.
                        
         7. Constructor cannot call or contain itself.
         
         8. Constructor cannot call more than one constructor.
         
         9. Constructor call MUST be the first line in the calling constructor.
         
         10. Class' object MUST be created with existing and visible constructor(s)

         11. super class' default constructor (no-arg) is called in sub class' 
              constructor(any constructor) by default. 

         12. At least one of the super class' constructors MUST be called in sub class.

         13. Constructors can be overload.
