12/10/2019
Topic: Data Structures
            Collection framework Intro
Package Name: day62_Collections
Agenda: 
    Morning: Java
    Afternoon: Selenium
------------------------------------------------------------------------------------------------------------------------------
Data Structures: In order to manage data efficiently and in an organized manner, we need Data-structures.
            -- Array
            -- Collections FrameWork
            -- Maps
            
Array: Collection of Data (same data type)
        Size is fixed
        Indexed numbers
        Can be multi - dimensional
        Supports primitives & objects
        Can have duplicates
        
Collections framework: consists of multiple Interfaces, each Interface has multiple implementations
        Interfaces in Collections framework:
                1. Iterable
                2. Collection
                3. List
                4. Set
                5. SortedSet
                6. Queue
                7. Deque
       All those interfaces are presented in java.util package.
       They ONLY support Objects as data type.
       
Iterable (I): root interface, super type of all the Interfaces in Collections framework.

Collection (I): extended by three interfaces: List(I), Set(I), Queue(I)

      List(I):  Implemented By ArrayList(C), LinkedList(C), Vector(C)
                Indexed, Dynamic sized, accepts duplicates.
                    List<Integer> list1 = new ArrayList<>();
                    List<String> list2 = new LinkedList<>();
                    List<Double> list3 = new Vector<>();
                    List<Integer> list4 = new Stack<>();
                    
                ArrayList : Indexed, ordered, array based class, internally uses the Array.
                
                LinkedList: Indexed, ordered, each objects are doubly linked in the LinkedList.
                			Adding & removing  (add(), remove()) data are faster in doubly linked 
                            Retrieving data (get()) is slower. Is not array based class.
                                   
                Vector    : Indexed, ordered, synchronized, only preferred in  multi-threads
                            advantage	: thread safe in multi-thread environment.
                        	disadvantage: slower
                        	has a child class: Stack{}
                
                Stack	  : Indexed, ordered, synchronized
                       		pop(): LIFO ==> Last in First Out
                       		removes the last object from the Stack.
                       
                       
    Set(I): Does not accepts duplicates, not Indexed, not Ordered
            Implemented by HashSet(C), LinkedHashSet(C), 
            extended by SortedSet(I)
                    SortedSet is implemented by TreeSet(C)
                    
                    Set<Integer> st1 = new HashSet<>();
                    Set<Integer> st2 = new LinkedHashSet<>();
                    Set<Integer> st3 = new TreeSet<>();
                    
                ONLY Accepts unique Objects.
                HashSet: Not ordered, Not indexed , Duplicates not allowed
                LinkedHashSet: Ordered, Not sorted, Not indexed , Duplicates not allowed
                
                SortedSet(I): Sorts the objects in Ascending order, does not accept duplicates
                                implemented by TreeSet(C)
                                
                                
Synchronized keyword:  used to achieve ==> Thread safe in  multi-thread environment
Multi-thread: multiple threads try to get access to same resources.


