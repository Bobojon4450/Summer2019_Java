10/07/2019
Topics: Method calls (layered fashion)
        ArrayList
        ArrayList vs Array

package: day33_ArrayList


Warm up:
    write a return method that accepts an int array and sorts it in descending order

    write a return method that accepts a double array and sorts it in descending order

    write a return method that accepts a char array and sorts it in descending order

    write a return method that accepts a String array and sorts it in descending order

        Hint: method overloading is preferred here


ArrayList:  presented in "java.util"
            does not support primitives, we can only store objects
            ArrayList' size is dynamic, adjusted automatically.
            ArrayList is an ordered collection of values (index number).
            we can add or remove objects from arrayList

        
declaration of ArrayList:
        ArrayList<NonPrimitive> variableName = new  ArrayList<NonPrimitive>();
        ArrayList<NonPrimitive> variableName = new  ArrayList<>();  (prefered)
        

declaration of array:
                int[] arr = new int[5];


Methods of ArrayList:
        add(object): adds objects to arrayList

        get(index):  gets the data from the ArrayList

        size(): returns the length of ArrayList as int

        clear(): removes everything from ArrayList

        set(index number, object): the given object will replace the object at the given index number

        contains(Object): checks if the given object is contained in the ArrayList or not, returns boolean values

        equal(ArrayList): checks if the two arrayList have same objects or not, returns boolean value

        remove(int): removes the given index.

        remove(object) :  removes the first matching object, and returns boolean value!

		indexOf(object) : returns the index number of the object from the arrayList, returns int 

        lastIndexOf(Object): returns the last index number of the object from the ArrayList, returns int

        Arrays.asList(Object Array):  used for converting object arrays to List interface 
        							  we will learn List Interface in future.
        
        

        addAll(Interface): used for storing multiple objects to ArrayList

        removeAll(Interface): removes all the matching objects


Sorting the array:

        Arrays.sort(VariableName);  sorts in ascending order

        Arrays class is presented in "java.util" package


Sorting the arrayList:
        Collections.sort(VariableName);  sorts in ascending order

        Collections class is presented in "java.util" package


Regular methods declaration:

        access-modifier specifier return-type  methodName(parameter){
                    statements;

        }
		

ArrayList vs Array:
    	ArrayList' size is dynamic, Array' size is fixed
   		ArrayList only supports non primitives, Array supports all
    	Array can be multi-dimensional but ArrayList cannot be multi-dimensional


tomorrow:
        indexOf, remeovaALl, addAll,
        converting array to arrayList , Collections.sort

