11/04/2019
Topics:     1. Method Overriding
            2. Overloading vs Overriding
            3. final keyword:
                    constant variables
                    immutable class
                    final methods
                    
package: day48_MethodOverRiding
---------------------------------------------------------------------------------------------------------------


Method overloading:  same name, different parameter
                     return type doesn't matter
                     access modifiers don't matter
                     any method can be overload  
                     
Method overriding: same name, same parameters, implementation of logic is different.
                    Return-Type MUST be same.
                    Cannot happen in the same class.
                    Method MUST be override in sub class.
                    
                    ONLY THE INSTANCE METHODS CAN BE OVERRIDDEN
                    CONSTRUCTORS and STATIC METHODS cannot be OVERRIDDEN.
                    
                    Private methods cannot be override.
                    The method we are going to override MUST be inheritable to the sub class.
                    Override method' access modifiers need to be same or more visible.
                    
                        default ==> deafult, protected, public
                        protected ==> protected, public
                        public ==> public
                        private ==> cannot be overridden!
                        public > protected > default > private
                           	    
@Override notation: used to verify if the method is overridden or not.

Why do we need overriding?
        To implement specific functionality to the method. We create methods with same name and
        same parameters, then provide different implementation.
        
		Example: 
                WebDriver driver = new chromeDriver();
                driver.get("URL"): goes to the URL in chrome browser.
                WebDriver driver = new FireFoxDriver();
                driver.get("URL"): goes to URL in firefox browser.
    
    super class: Bank
            actions: InterestRate()  ==>   9%
    sub classes: BankOfAmerica  ==> 7%
                 PNC            ==> 6%
                 CapitalOne     ==> 8%
                 
Override VS overload:

        Overload: access modifier can be same or different
                  return-type can be same or different
                  parameters MUST be different
                  any method can be overload
                  method name MUST be same
                  can happen in the same class
                  
        Override: access modifier needs to be same or more visible.
                  the method MUST be inheritable to the sub class
                  return type MUST be same
                  method name Must be same
                  parameters MUST be same
                  only instance methods can be override
                  MUST be override in sub class.
                  @Override annotation MUST be applicable.
                  
override benefits: 
            readable
            re-usability
            flexible
            

final keyword: constant, cannot be changed or modified.
               final keyword can only be applied to: 
        
           final variables: we cannot re-assign it.
                          final Instance variables and static variables MUST be initialized 
                          immediately.
                          final Local variable can be declared but needs to be initialized before use.
                          If the private data is final, we can only generate getters.
                          We cannot have setters for those private data.
                         	   
           final methods: implementation of the method cannot be changed due to final keyword.
                          final methods cannot be overridden.
                          final methods can be overload.
                               main method can be final.
                    
           final classes: final class cannot be super class, but can be sub class.
                               final classes are immutable, they cannot be extended.
                             